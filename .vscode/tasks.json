{
  // task.json 에 대한 공식문서 https://go.microsoft.com/fwlink/?LinkId=733558
  "version": "2.0.0",
  // Override a task's shell on WindowsOS
  // "windows": {
  //   "options": {
  //     "shell": {
  //       "executable": "D:\\Program Files\\Msys64\\usr\\bin\\bash.exe",
  //       "args": ["--login", "-i"]
  //     }
  //   }
  // },
  "tasks": [
    // C++ 디버그 빌드 및 세부 설명
    {
      // 작업의 이름(라벨명) : 우리가 보고 찾는 용도이므로 한 눈에 어떤 작업인지 파악하기 쉽도록 이름을 짓는 것이 좋습니다.
      "label": "C++: g++ 디버그 빌드",

      // 작업의 세부설명 : 작업의 세부설명입니다.
      "detail": "-g 옵션으로 표준 디버깅 정보를 포함하여 빌드합니다.",

      // 작업의 타입 : 이 작업이 어떠한 유형의 작업인지 서술합니다. 대표적으로 shell(해당 명령어를 쉘에 입력), process(프로그램을 구동), cppbuild(빌드 및 디버깅) 가 있습니다.
      "type": "cppbuild",

      // 작업의 그룹 : vscode가 해당 작업을 찾기 위한 작업의 태그입니다. 정해진 값 외에는 허용되지 않습니다. build(컴파일 및 빌드), test(테스트 구동), none(작업을 그룹에 할당 안 함) 가 있습니다.
      "group": {
        "kind": "build",
        // 디폴트 설정 : true로 지정한 작업이 있을 경우, 다른 false는 무시되고 해당 작업을 합니다. true 지정한 작업이 복수일 경우, false는 무시되고 true 인 작업들만 목록에 올라옵니다.
        "isDefault": true
      },

      // 명령어 시작경로 : 명령어의 맨 첫 단어, 즉 명령할 파일의 경로. 이 경우 g++ 컴파일러에 접근해야 하므로 MinGW bin 내부 g++.exe 주소를 "command": "D:\\Program Files\\Msys64\\mingw64\\bin\\g++.exe" 같이 직접 입력해도 좋습니다. g++ 를 입력하면 환경변수 설정을 했기 때문에 바로 g++.bin 에 접근합니다.
      "command": "g++",

      // 명령어 값 : 각 옵션과 입력값들을 적습니다. 배열로 여러 값들을 가독성 좋게 따로따로 적을 수 있습니다.
      "args": [
        "-std=c++17", // C++ 17 적용
        "-g", // 표준 디버깅 정보 포함 옵션
        "${fileDirname}/**.cpp",
        "-o", // 출력 옵션
        "${fileDirname}/${fileBasenameNoExtension}.exe"
      ],

      // 추가 옵션 : 명령에 추가적인 사항
      "options": {
        // 작업 디렉터리 주소 설정 옵션
        "cwd": "${fileDirname}",
        // 쉘 터미널 지정 ================================================================================
        "shell": {
          "executable": "D:\\Program Files\\Msys64\\usr\\bin\\bash.exe",
          "args": ["--login", "-i"],
          "env": {
            "MSYSTEM": "MINGW64", // [MSYS (default) | MINGW32 | MINGW64] : set the MSYSTEM environment variable to select a MinGW toolchain.
            "CHERE_INVOKING": "1" // [0 | 1] : prevent a shell from doing a cd "${HOME}" = inhibit the working directory change from current directory
          }
        }
      },

      // 문제 상황 및 경고 문구 매칭 : 컴파일시 컴파일러에서 발생한 문제나 경고에 대한 문구를 매칭하여 vscode 편집기에 반영. 상세 설명 링크 https://code.visualstudio.com/docs/editor/tasks#_defining-a-problem-matcher
      "problemMatcher": {
        // 문제를 발생시킨 대상
        "owner": "cpp",
        // 문제의 발생지
        "fileLocation": ["relative", "${workspaceRoot}"],
        // 문제 상황 및 경고 문구의 패턴
        "pattern": {
          // 정규 표현식 : 정규 표현식으로 컴파일러의 문구를 분석합니다. (에러 테스트 예시: helloWorld.c:5:3: warning: implicit declaration of function 'prinft')
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    },

    // C++ 릴리즈 빌드
    {
      "label": "C++: g++ 릴리즈 빌드",
      "detail": "-o 옵션으로 릴리즈 할 exe 파일을 빌드합니다.",
      "type": "cppbuild",
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "command": "g++",
      "args": [
        "-std=c++17",
        "${fileDirname}\\**.cpp",
        "-o",
        "${fileDirname}\\${fileBasenameNoExtension}.exe"
      ],
      "options": {
        "cwd": "${fileDirname}"
      },
      "problemMatcher": {
        "owner": "cpp",
        "fileLocation": ["relative", "${workspaceRoot}"],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    },

    // C++ 테스트
    {
      "label": "C++: ----------------------------------------",
      "detail": "--------------------------------------------",
      "type": "shell",
      "group": {
        "kind": "build",
        "isDefault": false
      },
      // 리눅스 체계 명령어 치환(Command Substitution) $(find) -> %dir /b | findstr% 윈도우 명령어 치환으로 바꿔야 사용가능
      "command": "g++ -g $(find . -type f -iregex \".*.cpp\") -o ${fileDirname}\\${fileBasenameNoExtension}.exe",
      "args": [
        "-g",
        "$(find",
        "${fileDirname}",
        "-type",
        "f",
        "-iregex",
        "'.*\\.cpp')",
        "-o",
        "${fileDirname}/${fileBasenameNoExtension}"
      ],
      "options": {
        "cwd": "${fileDirname}"
      },
      "problemMatcher": {
        "owner": "cpp",
        "fileLocation": ["relative", "${workspaceRoot}"],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(warning|error):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      }
    },

    // C 릴리즈 빌드
    {
      "label": "C: gcc 릴리즈 빌드",
      "detail": "-o 옵션으로 릴리즈 할 exe 파일을 빌드합니다.",
      "type": "cppbuild",
      "group": "build",
      "command": "gcc",
      "args": ["${file}", "-o", "${fileDirname}\\${fileBasenameNoExtension}"],
      "problemMatcher": ["$gcc"]
    },

    // C 디버그 빌드
    {
      "label": "C: gcc.exe 디버그 빌드",
      "detail": "-g 옵션으로 표준 디버깅 정보를 포함하여 빌드합니다.",
      "type": "cppbuild",
      "group": "build",
      "command": "gcc",
      "args": ["-g", "${file}", "-o", "${fileDirname}\\${fileBasenameNoExtension}"],
      "options": {
        "cwd": "${fileDirname}"
      },
      "problemMatcher": ["$gcc"]
    },

    // Execute 바이너리 실행(Windows)
    {
      "label": "exe 파일 실행",
      "detail": "현재 폴더에서 cpp 파일과 같은 이름의 exe 파일을 구동합니다.",
      "type": "process",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "command": "${fileDirname}/${fileBasenameNoExtension}.exe"
    },

    // 테스트용 Hello, world!
    {
      "label": "테스트 출력",
      "detail": "Hello, world! 를 출력합니다.",
      "type": "shell",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "command": "echo",
      "args": ["Hello, world!"]
    },

    // 테스트용 Hello, world!
    {
      "label": "파워쉘1",
      "detail": "파워파워쉘",
      "type": "shell",
      "group": {
        "kind": "test",
        "isDefault": true
      },
      "command": "echo",
      "args": ["Hello, world!"],
      "options": {
        "shell": {
          "executable": "powershell.exe"
        }
      }
    }
  ]
}
